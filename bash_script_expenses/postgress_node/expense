#! /usr/bin/env node

const {Client } = require('pg');
const PROCESS = require('process');
const READLINE = require('readline')

class ExpenseData {
  constructor() {
    this.client = new Client({
      user: USER,
      host: HOST,
      database: DB,
      password: password,
      port: 5432,
    })
  }
  logAndExit(err) {
    console.log(err);
    process.exit(1);
  };

  displayAsTable(row){
    return [`${row.id}`.padStart(3),
    `${row.created_on.toDateString()}`,
    `${row.amount}`.padStart(10),
    `${row.memo}`].join('|');
  }

  async getQuery(queryText) {
    this.client.connect().catch(err => logAndExit(err));
    let data = await this.client.query(queryText).catch(err => this.logAndExit(err));
    return data;
  }

  async getQueryWithValues(client, queryText, queryValues) {
    let data = null;
    if (queryText.split(' ')[0] === 'INSERT' || queryText.split(' ')[0] === 'DELETE') {
      await client.query(queryText, queryValues);
    } else {
      data = client.query(queryText, queryValues);
    }
    if (data) return data;
  }

  async list() {
    let data = await this.getQuery('SELECT *, count(amount) AS total FROM expenses GROUP BY id')
                          .catch(err => logAndExit(err));
  await this.totalExpenses(data);
  await console.log(data.rows.map(row => this.displayAsTable(row)).join('\n'));
  await this.client.end().catch(err => logAndExit(err));
  if (data.rows.length > 0) await this.total(data)
 }

 async addExpenses(amount, memo) {
  await this.client.connect().catch(err => this.logAndExit(err));
  let date = new Date();
  date = date.toLocaleDateString();
  let queryText = 'INSERT INTO expenses (amount, memo, created_on) VALUES($1, $2, $3)'
  let queryValues = [amount, memo, date]
  await this.getQueryWithValues(this.client, queryText, queryValues);

  this.client.end().catch(err => this.logAndExit(err))
 }

  async search(keyword) {
    await this.client.connect().catch(err => this.logAndExit(err));
    let queryText = `SELECT * FROM expenses WHERE memo ILIKE $1`;
    let queryValues = [`%${keyword}%`];
    let data = await this.getQueryWithValues(this.client, queryText, queryValues)
                                  .catch(err => this.logAndExit(err));
    this.totalExpenses(data);
    await console.log(data.rows.map(row => this.displayAsTable(row)).join('\n'));

    this.client.end().catch(err => this.logAndExit(err));
    if (data.rows.length > 0) this.total(data)
  }

  async delete(id) {
    await this.client.connect().catch(err => this.logAndExit(err));
    let queryText1 = 'DELETE FROM expenses WHERE id = $1';
    let queryValues = [id];
    let queryText2 = 'SELECT * FROM expenses WHERE id = $1'

    let data = await this.getQueryWithValues(this.client, queryText2, queryValues)
                                  .catch(err => this.logAndExit(err));
   
    let idArray = await data.rows.map(rows => rows.id);
    if (idArray.includes(Number(id))) {
      await this.getQueryWithValues(this.client, queryText1, queryValues).catch(err => this.logAndExit(err));
      console.log('The following expense has been deleted');
      await console.log(data.rows.map(row => this.displayAsTable(row)).join('/n'));
    } else {
      console.log('Please pick a valid id');
    }
    this.client.end().catch(err => this.logAndExit(err));
  }

  async clear() {
    await this.client.connect().catch(err => this.logAndExit(err));

    await this.client.query('DELETE FROM expenses');
    console.log('All expenses have been deleted')
    
    this.client.end().catch(err => this.logAndExit(err));
  }

  async total(data) {
    let length = data.rows.length;
    let total = await data.rows.total[length - 1]
    console.log(total)
    console.log('-'.repeat(50))
    console.log(`total` + `${total}`.padStart(30))
  }

  async totalExpenses(data) {
    if (data.rows.length === 0) {
      console.log('there are no expenses');
    } else {
    let length = await data.rows.length;
    console.log(`There are ${length} items`)
    }
  }
}

class CLI {
  constructor() {
    this.app = new ExpenseData()
  }
  static HELP = `an expense recording system
  commands:
  
  add AMOUNT MEMO[DATE] - record a new expense
  clear - delete all expenses
  list - list all expenses
  delete NUMBER - remove expense with id NUMBER
  search QUERY - list expenses with a matching memo field`;

  displayHelp() {
    console.log(CLI.HELP)
  }

  run() {
    let args = PROCESS.argv;
    let command = args[2];

    if (command === 'list') {
      this.app.list();
    } else if (command === `add`) {
      let amount = args[3];
      let memo = args[4];
      if (amount && memo) {
        this.app.addExpenses(amount, memo);
      } else {
        console.log('You must provide an amount and memo.');
      }
    } else if (command === 'search') {
      this.app.search(args[3]);
    } else if (command === 'delete') {
      if (args[3]) {
        this.app.delete(args[3]);
      } else {
        console.log('please pick a number')
      }
    } else if(command === 'clear') {
      let rl = READLINE.createInterface({
        input: process.stdin,
        output: process.stdout
      });
      let questionText = 'This will remove all expenses. Are you sure? (y/n) ';
      rl.question(questionText, (answer) => {
        if (answer === 'y') {
          this.app.clear();
        }
        rl.close();
      });
    } else {
      this.displayHelp();
    }
  }
}

let currentCLI = new CLI();
currentCLI.run()


